name: Flutter CICD
on:
  pull_request:
    types: [ opened, reopened, synchronize, edited ]
  workflow_dispatch:
env:
  FLUTTER_WINDOWS_VERSION: stable
  FLUTTER_MACOS_VERSION: master
  APP_STORE_CONNECT_PRIVATE_KEY_FILE_NAME: app_store_connect_private_key.p8
  BUNDLE_IDENTIFIER: com.techcreator.EfSteroid
  SIGNING_TYPE: MAC_APP_DIRECT
  EF_STEROID_MACOS_ARTIFACT_DIR: "Ef Steroid Installer"
  GITHUB_MACOS_ARTIFACT_NAME: macos-artifacts
#  DATABASE_USERNAME: SA
#  DATABASE_SA_PASSWORD: fdkngx4tak7vka8JNT

jobs:
  Create-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_retrieval.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1
      - name: Install cider
        run: dart pub global activate cider
      - name: Get and store project version
        id: version_retrieval
        run: echo "::set-output name=version::v$(cider version)"
      - uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ env.PROJECT_VERSION }}

  Windows-CI:
    permissions:
      contents: write
    runs-on: windows-latest
    needs:
      - Create-tag
    steps:
      - uses: actions/checkout@v2

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: $FLUTTER_WINDOWS_VERSION

      - name: Check Dart code style
        run: flutter format lib --set-exit-if-changed

      - name: Install dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
      #      - name: Install dotnet-ef
      #        run: dotnet tool install -g dotnet-ef

      - name: Build CsprojTool artifacts
        shell: pwsh
        working-directory: tools/CsprojTool
        run: ./BuildArtifacts.ps1

      - name: Install packages
        run: flutter pub get
      - name: Run build_runner
        run: flutter pub run build_runner build

      #      - name: Install SQL Server
      #        uses: Particular/install-sql-server-action@main
      #        with:
      #          connection-string-env-var: SQL_SERVER_CONNECTION_STRING
      #      - name: Create database user
      #        run: sqlcmd -v MSSQL_SA_PASSWORD="$env:DATABASE_SA_PASSWORD" -i Scripts/sql/enable_mssql_sa_user.sql
      #        shell: pwsh
      #
      #      - name: Setup MSBuild
      #        uses: microsoft/setup-msbuild@v1
      #      - name: Build Dotnet Framework TestingProject
      #        run: msbuild.exe tools/TestingProjects/Ef6/NetFrameworkWebProject/NetFrameworkWebProject.sln
      #
      #      - name: Run test
      #        run: flutter test --coverage

      - name: Build Windows artifacts
        run: flutter build windows

  macOS-CI:
    permissions:
      contents: write
    runs-on: macos-latest
    needs:
      - Create-tag
    steps:
      - uses: actions/checkout@v2

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: $FLUTTER_MACOS_VERSION

      - name: Check Dart code style
        run: flutter format lib --set-exit-if-changed

      - name: Install dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
      #      - name: Install dotnet-ef
      #        run: dotnet tool install -g dotnet-ef

      - name: Install needle
        run: brew install needle

      - name: Install packages
        run: flutter pub get
      - name: Run build_runner
        run: flutter pub run build_runner build

      # Enable macOS desktop support. Remove this when Flutter marks macOS support as stable.
      - name: Enable macOS Desktop
        run: flutter config --enable-macos-desktop

      #      - name: setup-docker
      #        uses: docker-practice/actions-setup-docker@1.0.8
      #
      #      - name: Run docker to install MSSQL
      #        run: ./Scripts/docker-setup.ps1 $env:DATABASE_SA_PASSWORD
      #        shell: pwsh
      #
      #      # Comment out this until I figure out how to set up SQL in docker for testing purpose.
      #      - name: Run test
      #        run: flutter test --coverage

      - name: Build macOS artifacts
        run: flutter build macos

      - name: Create a file to store APP_STORE_CONNECT_PRIVATE_KEY
        run: echo "$APP_STORE_CONNECT_PRIVATE_KEY" | base64 -Dd > $APP_STORE_CONNECT_PRIVATE_KEY_FILE_NAME
      - name: Prepare signing certificate and provisioning profile
        uses: ngeri/prepare-signing@v1.0.2
        with:
          appStoreConnectPrivateKey: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
          keyID: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY_ID }}
          issuerID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          base64P12File: ${{ secrets.P12_SIGNING_CERTIFICATE }}
          p12Password: ${{ secrets.P12_SIGNING_CERTIFICATE_PASSWORD }}
          bundleIdentifier: ${{ env.BUNDLE_IDENTIFIER }}
          signType: ${{ env.SIGNING_TYPE }}

      - name: Archive app
        #        if: ${{ github.ref == 'refs/heads/production' }}
        run: ./Scripts/releaseMacOs.sh $APP_STORE_CONNECT_PRIVATE_KEY_FILE_NAME $APP_STORE_CONNECT_PRIVATE_KEY_ID $APP_STORE_CONNECT_ISSUER_ID
      - name: Remove app_store_connect_private_key.p8
        run: rm $APP_STORE_CONNECT_PRIVATE_KEY_FILE_NAME
      - name: actions/upload-artifact@v3
        with:
          name: ${{ env.GITHUB_MACOS_ARTIFACT_NAME }}
          path: ${{ env.EF_STEROID_MACOS_ARTIFACT_DIR }}

  CD:
    runs-on: ubuntu-latest
    env: 
      GITHUB_RELEASE_ARTIFACTS_DIR: artifacts
    needs:
      - Create-tag
      - Windows-CI
      - macOS-CI
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ env.GITHUB_MACOS_ARTIFACT_NAME }}
          path: ${{ env.GITHUB_RELEASE_ARTIFACTS_DIR }}
      - uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.GITHUB_RELEASE_ARTIFACTS_DIR }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.Create-tag.outputs.version }}
